# 1) En el proyecto: 
	- New Module
	- Import JAR/AAR Package
	- Se elije la libreria: Socket.AAR y Finish
	- Luego dar click en File
	- Project structure
	- Modules / Dependencies
	- En las dependencias dar click en Add (Alt + Insert)
	- Module Dependences
	- Se elije la libreria servicenotication.aar
	- click en OK

	
	
# 2) Para que esta aplicación funcione se deben incluir en el Manifest los siguientes permisos de la app:

<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />



# 3) Para inicializar la aplicación se debe Crear un nuevo Objeto de la libreria:

class configuraciones{
	String ip = "192.168.1.2";	      //ip donde esta instalado el servidor
	String titulo = "tituloProyecto"; // este titulo debe coincidir con el mismo titulo dado en la libreria del servidor
	String puertoSocket = "5000";     // puerto configurado en el servidor para la comunicación socket
	boolean permisosUsarDatos = true; // usar datos para la navegar en la aplicación
}



# 4) Para iniciar el socket por primera vez se debe agregar la siguiente funcion una única vez en una activity (apodaremos a esa activity: startSocket) (generalmente después de aceptar los terminos y condiciones:

     class Control extends ComunicationToService {
        public Control(Context context) {
            super(context);
        }

        @Override
        public void DatosRecibidos(ContentValues data) {
            super.DatosRecibidos(data);
            String proceso = (String) data.get("P");
            String datos = (String) data.get("D");
            String error = (String) data.get("E");
        }
    }
    
    @RequiresApi(api = Build.VERSION_CODES.N)
    private void configurarServicio(){
        ConfigurarSocketDto configurarSocketDto = new ConfigurarSocketDto();
        configurarSocketDto.setIpServer(configuraciones.ip);
        configurarSocketDto.setPuerto(Integer.parseInt(configuraciones.puertoSocket));
        configurarSocketDto.setUsarPushDefault(true);
        configurarSocketDto.setTituloProyecto(configuraciones.titulo);
        configurarSocketDto.setUsoDatos(configuraciones.permisosUsarDatos);
        configurarSocketDto.setImagenGrande(R.drawable.senint2_icon); //aca se elije el icono a utilizar en los mensajes que se reciban (PUSH)

        control.AlmacenarDatosConfiguracion(configurarSocketDto);
    }

#5) En la misma activity que apodamos "startSocket", en el lugar que deseemos iniciar el socket colocamos:
	control = new Control(TerminosCondiciones.this);
        configurarServicio();
        control.StartService(false);

# 4) Si en algún momento se desea consultar si hay algun dato recibido se puede invocar:

AnswerSocket answerSocket = socket.ReadDataReceived();
if(answerSocket != null){
	//si hay datos a procesar
	
	
	String proceso = answerSocket.getProcess();
	//la libreria tiene algunos procesos definidos que son:
	/*
	DiccionarioProcesos.procesoSocketMatricula;
	DiccionarioProcesos.procesoSocketPinVida;
	DiccionarioProcesos.procesoSocketPush;	
	*/
	// se pueden crear nuevos procesos y filtrarlos para diferentes funcionalidades o identificar y hacer alguna accion adicional antes los procesos genericos
	
	
	
	String error = answerSocket.getError();  //si hay algun error se reflejara en esta variable
	//el sistema cuenta con algunos errores definidos en la libreria, estos son:
	/*
	DiccionarioErrores.msgErrorDatos;
	DiccionarioErrores.msgErrorDefault;
	DiccionarioErrores.msgErrorMatricula;
	DiccionarioErrores.msgErrorNoExisteProceso;
	DiccionarioErrores.msgErrorPin;
	*/
	//se podria crear un switch para identificar el error y efectuar soluciones nate el mismo
	
	
	
	//si no hay errores el sistema entrega resultados a diferentes peticiones al servidor, estos se pueden capturar de la siguiente manera:
	String datosRecibidos = answerSocket.getCompressedData();
	//se recomienda que estos datos vengan comprimidos en formato Gson, por lo que se sugiere que se conviertan a un objeto propio de la aplicacion	
	
}else{
	//no hay datos a procesar
}



# 5) si se desea mas adelante en las diferentes actividades o en algun panel de configuracion, se pueden cambiar los permisos de navegacion para que la app
//no use los datos moviles, o para permitir usarlos si estan deshabilitados, así:

socket.ChangePermissionsUseMobileData(true); //habilitar permisos
socket.ChangePermissionsUseMobileData(false);//deshabilitar permisos



# 6) la libreria tiene un modulo para generar notificaciones PUSH en el celular que usa de manera automatica, pero si se desea se puede usar para generar notificaciones propias y personalizadas mediante la funcion:

//primero se configura la notificacion, así:
PushDto pushDto = new PushDto();
pushDto.setIdClaseIniciar("MainActivity");   //actividad que se desea abrir cuando se pulse en la notificacion PUSH
pushDto.setIdImagen("Imagen1");      //imagen que se desea usar
pushDto.setInfoNotificacion("1234"); //alguna descripcion de max 10 caracteres de la notificacion
pushDto.setMensajeTicker("ticker");  //mensaje resumen de la notificacion que se visualiza durante un segundo en el top de la pantalla
pushDto.setSonido("true");           //true o false, si queremos que la notificacion suene cuando se genere en el cel
pushDto.setVibrar("true");           //true o false, si queremos que el cel vibre al generar la notificacion
pushDto.setTextoNotificacion("contenido"); //mensaje de la notificacion para mostrar
pushDto.setTituloNotificacion("titulo");  //titulo de la notificacion        
        
//luego de configurarla, se genera usando la libreria, así:
socket.MakePushNotification(getApplicationContext(), pushDto);



# 7) Enviar datos usando el canal creado por la libreria en el socket
//se establece un proceso para procesar en el servidor y los datos a procesar, y se activa el envio, así:

socket.SendData("Proceso", "datos");




8) Cerrar o detener el servicio:
socket.stop();
