# 1) En el proyecto: 
	- New Module
	- Import JAR/AAR Package
	- Se elije la libreria: servicenotication.AAR y Finish
	- Luego dar click en File
	- Project structure
	- Modules / Dependencies
	- En las dependencias dar click en Add (Alt + Insert)
	- Module Dependences
	- Se elije la libreria servicenotication.aar
	- click en OK

	
	
# 2) Para que esta aplicación funcione se deben incluir en el Manifest los siguientes permisos de la app:

<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />



# 3) Para inicializar la aplicación se debe Crear un nuevo Objeto Class:

class configuraciones{
	String ip = "192.168.1.2";	      //ip donde esta instalado el servidor
	String titulo = "tituloProyecto"; // este titulo debe coincidir con el mismo titulo dado en la libreria del servidor
	String puertoSocket = "5000";     // puerto configurado en el servidor para la comunicación socket
	boolean permisosUsarDatos = true; // usar datos para la navegar en la aplicación
}



# 4) Para iniciar el socket por primera vez se debe agregar la siguiente funcion una única vez en una activity 
(apodaremos a esa activity: startSocket) (generalmente después de aceptar los terminos y condiciones):

     class Control extends ComunicationToService {
        public Control(Context context) {
            super(context);
        }

        @Override
        public void DatosRecibidos(ContentValues data) {
            super.DatosRecibidos(data);
            String proceso = (String) data.get("P");
            String datos = (String) data.get("D");
            String error = (String) data.get("E");
        }
    }
    
    @RequiresApi(api = Build.VERSION_CODES.N)
    private void configurarServicio(){
        ConfigurarSocketDto configurarSocketDto = new ConfigurarSocketDto();
        configurarSocketDto.setIpServer(configuraciones.ip);
        configurarSocketDto.setPuerto(Integer.parseInt(configuraciones.puertoSocket));
        configurarSocketDto.setUsarPushDefault(true);
        configurarSocketDto.setTituloProyecto(configuraciones.titulo);
        configurarSocketDto.setUsoDatos(configuraciones.permisosUsarDatos);
        configurarSocketDto.setImagenGrande(R.drawable.senint2_icon); //aca se elije el icono a utilizar en los mensajes que se reciban (PUSH)

        control.AlmacenarDatosConfiguracion(configurarSocketDto);
    }

# 5) En la misma activity que apodamos "startSocket", en el lugar que deseemos iniciar el socket colocamos:
	control = new Control(TerminosCondiciones.this);
        configurarServicio();
        control.StartService(false);

# 6) Si en algún momento se desea consultar si hay algun dato recibido, primero se crean las mismas funciones del punto 4) 
y en el constructor de la activity donde se desea leer la información se coloca:

- en el constructor:
	control = new Control(AdminActivity.this);
	
- En la funcion Control (del punto 4) que se coloca en la activity se pueden levantar los eventos que se requieran cuando se recibe la información.
	
	//la libreria tiene algunos procesos definidos que son:
	/*
	DiccionarioProcesos.procesoSocketMatricula;
	DiccionarioProcesos.procesoSocketPinVida;
	DiccionarioProcesos.procesoSocketPush;	
	*/
	// se pueden crear nuevos procesos y filtrarlos para diferentes funcionalidades o identificar y hacer alguna accion adicional antes los procesos genericos
		
	String error = answerSocket.getError();  //si hay algun error se reflejara en esta variable
	//el sistema cuenta con algunos errores definidos en la libreria, estos son:
	/*
	DiccionarioErrores.msgErrorDatos;
	DiccionarioErrores.msgErrorDefault;
	DiccionarioErrores.msgErrorMatricula;
	DiccionarioErrores.msgErrorNoExisteProceso;
	DiccionarioErrores.msgErrorPin;
	*/
	//se podria crear un switch para identificar el error y efectuar soluciones nate el mismo
		
	//si no hay errores el sistema entrega resultados a diferentes peticiones al servidor, estos se pueden capturar de la siguiente manera:
	String datosRecibidos = datos;
	//se recomienda que estos datos vengan comprimidos en formato Gson, por lo que se sugiere que se conviertan a un objeto propio de la aplicacion	


# 7) si se desea mas adelante en las diferentes actividades o en algun panel de configuracion, se pueden cambiar los permisos de navegacion para que la app
//no use los datos moviles, o para permitir usarlos si estan deshabilitados, así:

	control.UpdateConfigDataBase(false, true);


# 8) Enviar datos usando el canal creado por la libreria en el socket
//se establece un proceso para procesar en el servidor y los datos a procesar, y se activa el envio, así:

control.sendService("Prueba","{'mensaje': '1234'}", false);

//los mensajes se pueden enviar al servidor, pero si se desea, y para un usuario con perfil de administrador, 
//tambien se pueden enviar datos en modo broadcast para que el mensaje sea recibido por todos los dispositivos conectados en el socket.


# 9) Cerrar o detener el servicio:
control.StopService();
